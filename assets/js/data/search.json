[ { "title": "(Course 1) CS230 Deep Learning (homework-solutions)", "url": "/posts/cs230-deep-learning-standford-homework-solutions/", "categories": "CS230 Deep Learning, homework-solutions", "tags": "deep-learning", "date": "2022-01-25 12:33:00 +0900", "snippet": "Course 1: Neural Networks and Deep LearningWeek 1: Introduction to Deep Learning Class introduction Examples of deep learning projects Course detailsWeek 2: Neural Networks Basics Python Basics with Numpy Logistic Regression with a Neural Network MindsetWeek 3: Shallow Neural Networks Planar Data Classification with One Hidden LayerWeek 4: Deep Neural Network Building your Deep Neural Network: Step by Step Deep Neural Network - Application" }, { "title": "(Course 1) CS230 Deep Learning (lecture-notes)", "url": "/posts/cs230-deep-learning-standford-lecture-notes/", "categories": "CS230 Deep Learning, lecture-notes", "tags": "deep-learning", "date": "2022-01-14 12:33:00 +0900", "snippet": "CS230 Deep LearningCourse 1: Neural Networks and Deep LearningWeek 1: Introduction to Deep Learning Class introduction Examples of deep learning projects Course detailsWeek 2: Neural Networks BasicsLogictic Regression as a Neural Network C1W2L01: Binary Classification C1W2L02: Logistic Regression C1W2L03: Logistic Regression Cost Function C1W2L03: Gradient Descent C1W2L04: Derivatives C1W2L05: More Derivative Examples C1W2L06: Computation Graph C1W2L07: Derivatives with a Computation Graph C1W2L08: Logistic Regression Gradient Descent C1W2L09: Gradient Descent on m ExamplesPython and Vectorization C1W2L10: Vectorization C1W2L11: More Vectorization Examples C1W2L12: Vectorizing Logistic Regression C1W2L13: Vectorizing Logistic Regression’s Gradient Output C1W2L14: Broadcasting in Python C1W2L15: A Note on Python/Numpy Vectors C1W2L16: Quick tour of Jupyter/iPython Notebooks C1W2L17: Explanation of Logistic Regression Cost Function (Optional)Week 3: Shallow Neural Networks C1W3L01: Neural Networks Overview C1W3L02: Neural Network Representation C1W3L03: Computing a Neural Network’s Output C1W3L04: Vectorizing Across Multiple Examples C1W3L05: Explanation for Vectorized Implementation C1W3L06: Activation Functions C1W3L07: Why do you need Non-Linear Activation Functions? C1W3L08: Derivatives of Activation Functions C1W3L09: Gradient Descent for Neural Networks C1W3L10: Backpropagation Intuition (Optional) C1W3L11: Random InitializationWeek 4: Deep Neural Network C1W4L01: Deep L-layer Neural Network C1W4L02: Forward Propagation in a Deep Network C1W4L03: Getting your Matrix Dimensions Right C1W4L04: Why Deep Representations? C1W4L05: Building Blocks of Deep Neural Networks C1W4L06: Forward and Backward Propagation C1W4L07: Parameters vs Hyperparameters C1W4L08: Clarification For: What does this have to do with the brain? C1W4L09: What does this have to do with the brain?" }, { "title": "CS229 Machine Learning (lecture notes)", "url": "/posts/cs229-machine-learning-standford-lecture-notes/", "categories": "CS229 Machine Learning, lecture-notes", "tags": "machine-learning", "date": "2021-07-05 12:33:00 +0900", "snippet": "CS229 Machine LearningWeek 1Lecture 1: Introduction and Basic Concepts Introduction and Basic ConceptsLecture 2: Supervised Learning Setup. Linear Regression Supervised Learning Linear Regression Discriminative AlgorithmsWeek 2Lecture 3: Logistic Regression Weighted Least Squares Logistic RegressionLecture 4: Netwon’s Method Perceptron Netwon’s Method Perceptron Exponential Family Generalized Linear Models Generative AlgorithmsWeek 3Lecture 5: Gaussian Discriminant Analysis Gaussian Discriminant Analysis Naive Bayes.Lecture 6: Laplace Smoothing Laplace Smoothing Support Vector Machines.Week 4Lecture 7: Support vector machines Support Vector Machines Kernels.Lecture 8: Bias-Variance tradeoff Bias-Variance tradeoff Regularization and model/feature selectionWeek 5Lecture 9: Tree Ensembles Decision trees Ensembling methodsLecture 10: Neural Networks: Basics Deep learning BackpropagationWeek 6Lecture 11: Neural Networks: Training Neural Networks: TrainingLecture 12: Practical Advice for ML projects Practical Advice for ML projectsWeek 7Lecture 13: Neural Networks: Training K-means Mixture of Gaussians Expectation MaximizationLecture 14: Factor Analysis. Factor AnalysisWeek 8Lecture 15: Principal Component Analysis Principal Component Analysis Independent Component AnalysisLecture 16: MDPs. Bellman Equations. MDPs. Bellman Equations.Week 9Lecture 17: Value Iteration and Policy Iteration. LQR. LQG. Value Iteration and Policy Iteration LQR LQGLecture 18: Q-Learning. Value function approximation. Q-Learning Value function approximation.Week 10Lecture 19: Policy Search. REINFORCE. POMDPs. Policy Search REINFORCE POMDPsLecture 20: Optional topic. Wrap-up. Optional topic. Wrap-up" }, { "title": "CS229 Machine Learning (homework-solutions)", "url": "/posts/cs229-machine-learning-standford-homework-solutions/", "categories": "CS229 Machine Learning, homework-solutions", "tags": "machine-learning", "date": "2021-07-04 12:33:00 +0900", "snippet": "CS229 Machine LearningWeek 1: Problem Set 0 without solutions [pdf] with solutionWeek 2: Problem Set 1 without solutions [pdf] [code] with solutionWeek 4: Problem Set 2 without solutions [pdf] [code] with solutionWeek 8: Problem Set 3 without solutions [pdf] [code] with solutionWeek 10: Problem Set 4 without solutions [pdf] [code] with solution" }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 21:55:00 +0900", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " } ]
